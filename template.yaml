AWSTemplateFormatVersion: '2010-09-09'
Description: Julia Chatbot

Parameters:
  DisplayName:
    Type: String
    Description: Display Name
  TelegramAPIToken:
    Type: String
    Description: Telegram API Token
  OpenAIAPIToken:
    Type: String
    Description: OpenAI API Token
  BotName:
    Type: String
    Description: Bot Name
  BotId:
    Type: String
    Description: Bot ID
  AllowedChatIds:
    Type: String
    Description: Allowed Chat IDs
  OpenAILayer:
    Type: String
    Description: OpenAI Layer

Resources:
  LambdaCommonRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-lambda-role"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AdministratorAccess # TODO: Remove
      Path: /

  LambdaChatbot:
    Type: AWS::Lambda::Function
    Properties:
      Code: lambda-chatbot-package.zip
      Runtime: python3.9
      Layers:
        - !Ref OpenAILayer
      FunctionName: !Sub "${AWS::StackName}-chatbot"
      Description: !Sub "${DisplayName} Lambda Function"
      Handler: main.lambda_handler
      Environment:
        Variables:
          BOT_CONFIGURATION_SSM_PARAMETER: !Ref BotConfigurationSsmParameter
      Timeout: 180
      Role: !GetAtt LambdaCommonRole.Arn

  LambdaWebhookHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code: lambda-webhook-handler-package.zip
      Runtime: python3.9
      FunctionName: !Sub "${AWS::StackName}-webhook-handler"
      Description: !Sub "${DisplayName} Webhook Handler Lambda Function"
      Environment:
        Variables:
          CHATBOT_FUNCTION_NAME: !Ref LambdaChatbot
          BOT_CONFIGURATION_SSM_PARAMETER: !Ref BotConfigurationSsmParameter
      Handler: main.lambda_handler
      Timeout: 180
      Role: !GetAtt LambdaCommonRole.Arn

  LambdaInvokePermissionCaller:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: !GetAtt LambdaCommonRole.Arn
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaChatbot.Arn

  ApiGatewayRest:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: !Sub "${DisplayName} REST API"
      Description: !Sub "REST API for ${DisplayName}"

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !GetAtt ApiGatewayRest.RootResourceId
      RestApiId: !Ref ApiGatewayRest
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaWebhookHandler.Arn}/invocations"

  LambdaInvokePermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaWebhookHandler.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRest}/*/POST/"

  ChatsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-chats-table"
      AttributeDefinitions:
        - AttributeName: chat_id
          AttributeType: N
      KeySchema:
        - AttributeName: chat_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  BotConfigurationSsmParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Tier: Standard
      Name: !Sub "/${AWS::StackName}/bot-configuration"
      Description: !Sub "Bot configuration for ${DisplayName}"
      Type: String
      Value: !Sub |
        {
            "telegram_api_token": "${TelegramAPIToken}",
            "allowed_chat_ids": [${AllowedChatIds}],
            "bot_id": ${BotId},
            "bot_name": "${BotName}",
            "chats_table_name": "${ChatsDynamoDBTable}",
            "openai_api_key": "${OpenAIAPIToken}",
            "chat_model": "gpt-3.5-turbo",
            "bot_system_configuration": "Eres ${BotName}.",
            "audio_probability": 0.1,
            "aws_polly_engine": "neural",
            "aws_polly_language_code": "es-MX",
            "aws_polly_voice_id": "Mia"
        }
